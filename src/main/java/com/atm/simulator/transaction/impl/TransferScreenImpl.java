package com.atm.simulator.transaction.impl;

import com.atm.simulator.model.TransferSumaryModel;
import com.atm.simulator.service.AtmService;
import com.atm.simulator.transaction.TransferScreen;
import com.atm.simulator.utils.InputUtil;
import com.atm.simulator.utils.Utils;

public class TransferScreenImpl implements TransferScreen {
    private final AtmService atmService;

    public TransferScreenImpl(AtmService atmService) {
        this.atmService = atmService;
    }

    @Override
    public int transferScreen() {
        System.out.println("Please enter destination account and \n" +
                "press enter to continue or ");
        String accDest = InputUtil.input("press cancel (Esc) to go back to Transaction: ");

        System.out.println("\nPlease enter transfer amount and press enter to continue or");
        String strAmount = InputUtil.input("press enter to go back to Transaction: ");

        System.out.println("\nReference Number: (This is an autogenerated random 6 digits number)");
        String reffNum = InputUtil.input("press enter to continue or press enter to go back to Transaction:");

        return tansferConfirmScreen(atmService.inqTransfer(strAmount, accDest, reffNum));
    }

    @Override
    public int tansferConfirmScreen(TransferSumaryModel sumaryModel) {
        int response = 0;

        if (sumaryModel!=null) {
            System.out.println("Transfer Confirmation");
            System.out.println("Destination Account\t:" + sumaryModel.getAccountDest());
            System.out.println("Transfer Amount\t\t:" + sumaryModel.getTransferAmount());
            System.out.println("Reference Number\t:" + sumaryModel.getReffNumber());
            System.out.println();
            System.out.println("1. Confirm Trx\n" +
                    "2. Cancel Trx");

            int opt = 0;
            while (opt==0){
                String input = InputUtil.input("Choose option[2]: ");
                opt = Utils.isNumber(input) ? Integer.parseInt(input) : 0;

                switch (opt) {
                    case 1:
                        response = transferSumaryScreen(atmService.transferFund(sumaryModel.getTransferAmount(), sumaryModel.getAccountDest(), sumaryModel.getReffNumber()));
                        break;
                    case 2:
                        response = 4;
                        break;
                    default:
                        System.out.println("Invalid command");
                        opt =0;
                        break;
                }
            }
        }else{
            InputUtil.input("\nPress Enter to continue");
        }
        return response;
    }

    @Override
    public int transferSumaryScreen(TransferSumaryModel sumaryModel) {
        int response = 0;
        if (sumaryModel!=null) {
            System.out.println("Transfer Confirmation");
            System.out.println("Destination Account\t:" + sumaryModel.getAccountDest());
            System.out.println("Transfer Amount\t\t:" + sumaryModel.getTransferAmount());
            System.out.println("Reference Number\t:" + sumaryModel.getReffNumber());
            System.out.println("Balance\t\t\t:" + sumaryModel.getBalance());
            System.out.println();
            System.out.println("1. Transaction\n" +
                    "2. Exit");

            int opt = 0;
            while (opt==0){
                String input = InputUtil.input("Choose option[2]: ");
                opt = Utils.isNumber(input) ? Integer.parseInt(input) : 0;

                switch (opt) {
                    case 1:
                        response = 0;
                        break;
                    case 2:
                        response = 4;
                        break;
                    default:
                        System.out.println("Invalid command");
                        opt = 0;
                        break;
                }
            }
        }
        return response;
    }
}
